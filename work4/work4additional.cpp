#include <iostream>
#include <vector>
#include <string>
#include <unordered_map>

using namespace std; // namespace std 사용

class Book {
public:
    string title;
    string author;

    Book(const string& title, const string& author)
        : title(title), author(author) {
    }
};

class BookManager {
protected: 
    vector<Book> books; // 책 목록 저장

private:
    Book* getBookByTitle(string title) {
       

        return;
    }

    Book* getBookByAuthor(string author) {


    }

public:
    // 책 추가 메서드
    void addBook(const string& title, const string& author) {
        books.push_back(Book(title, author)); // push_back 사용
        cout << "책이 추가되었습니다: " << title << " by " << author << endl;
    }

    // 모든 책 출력 메서드
    void displayAllBooks() const {
        if (books.empty()) {
            cout << "현재 등록된 책이 없습니다." << endl;
            return;
        }

        cout << "현재 도서 목록:" << endl;
        for (size_t i = 0; i < books.size(); i++) { // 일반적인 for문 사용
            cout << "- " << books[i].title << " by " << books[i].author << endl;
        }
    }
       

    

    void findBookByTitle(string title) {
        int bookNumber = 0;
        bool isFound = false;
        for (int i = 0; i < books.size(); i++) {
            if (books[i].title == title) {
                isFound = true;
                bookNumber = i;
                cout << "일치하는 제목: " << "\n -> " << books[i].title << " by " << books[i].author << endl;
                break;
            }
            else {}
        }
        if (isFound = true) {
            cout << "1. 대여하기 2. 상위메뉴" << endl;
            int choiceBorrow;
            cin >> choiceBorrow;
            if (choiceBorrow == 1) {
                getBookByTitle(title);
            }
        }
        else {findBookByAuthor(title); 
        }
    }

    void findBookByAuthor(string author) {
        bool isFound = false;
        for (int i = 0; i < books.size(); i++) {
            if (books[i].author == author) {
                isFound = true;
            }
        }
        if (isFound = true) {
            cout << "1. 대여하기 2. 상위메뉴" << endl;
            int choiceBorrow;
            cin >> choiceBorrow;
            if (choiceBorrow == 1) {
                getBookByAuthor(author);           
            }
        }
        else { cout << "일치하는 결과가 없습니다." << endl; }
    }

    //Book* getBookByAuthor(string author) {}


    /*void searchByTitle(string title) {
        bool isFound = false;
        for (int l = 0; l < books.size(); l++) {
            if (books[l].title == title) {
                isFound = true;
                cout << "일치하는 제목: " << "\n -> " << books[l].title << " by " << books[l].author << endl;
            }
            else {}
        }
        if (isFound == false) { searchByAuthor(title); }
    }

    void searchByAuthor(string author) {
        vector<int>searchResult;
        for (int w = 0; w < books.size(); w++) {
            if (books[w].author == author) {
                searchResult.push_back(w);
            }
            else {}
        }
        if (searchResult.empty()) { cout << "일치하는 결과가 없습니다." << endl; }
        else {
            cout << "일치하는 작가: " << endl;
            for (int y = 0; y < searchResult.size(); y++) {
                cout << " -> " << books[searchResult[y]].title << " by " << books[searchResult[y]].author << endl;
            }
        }
    }*/
};

class borrowManager {
private:
    unordered_map<string, int>stock = {

    };


public:
    void initializeStock(Book book, int quantity = 3) {
       
    }

    void borrowBook(string title){}

    void retrunBook(string title){}

    void displayStock(){}

};

int main() {
    BookManager manager;

    // 도서관 관리 프로그램의 기본 메뉴를 반복적으로 출력하여 사용자 입력을 처리합니다.
    // 프로그램 종료를 선택하기 전까지 계속 동작합니다.
    while (true) {
        cout << "\n도서관 관리 프로그램" << endl;
        cout << "1. 책 추가" << endl; // 책 정보를 입력받아 책 목록에 추가
        cout << "2. 모든 책 출력" << endl; // 현재 책 목록에 있는 모든 책 출력
        cout << "3. 검색" << endl; // 검색
        cout << "4. 대여" << endl; // 대여
        cout << "5. 반납" << endl; // 반납
        cout << "6. 종료" << endl; // 프로그램 종료
        cout << "선택: ";

        int choice; // 사용자의 메뉴 선택을 저장
        cin >> choice;


        if (choice == 1) {
            // 1번 선택: 책 추가
            // 사용자로부터 책 제목과 저자명을 입력받아 BookManager에 추가합니다.
            string title, author;
            cout << "책 제목: ";
            cin.ignore(); // 이전 입력의 잔여 버퍼를 제거
            getline(cin, title); // 제목 입력 (공백 포함)
            cout << "책 저자: ";
            getline(cin, author); // 저자명 입력 (공백 포함)
            manager.addBook(title, author); // 입력받은 책 정보를 추가
        }
        else if (choice == 2) {
            // 2번 선택: 모든 책 출력
            // 현재 BookManager에 저장된 책 목록을 출력합니다.
            manager.displayAllBooks();
        }
        else if (choice == 3) {
            // 3번 선택: 검색
            // 검색 옵션으로 이동합니다.
            string searchTerm; // 검색어            
            cout << "검색어를 입력해주세요.: ";
            cin.ignore();
            getline(cin, searchTerm);
            cout << "- 검색결과 ";
            manager.findBookByTitle(searchTerm);
        }
        else if (choice == 4) {
            // 4번 선택: 대여
            // 도서를 대여합니다.

        }
        else if (choice == 5) {
            // 5번 선택: 반납
            // 도서를 반납합니다.

        }
        
        else if (choice == 6) {
            // 6번 선택: 종료
            // 프로그램을 종료하고 사용자에게 메시지를 출력합니다.
            cout << "프로그램을 종료합니다." << endl;
            break; // while 루프 종료
        }
        else {
            // 잘못된 입력 처리
            // 메뉴에 없는 번호를 입력했을 경우 경고 메시지를 출력합니다.
            cout << "잘못된 입력입니다. 다시 시도하세요." << endl;
        }
    }

    return 0; // 프로그램 정상 종료
}







/*Book* findBookByTitle(string title) {
    int bookNumber = 0;
    bool isFound = false;
    for (int i = 0; i < books.size(); i++) {
        if (books[i].title == title) {
            isFound = true;
            bookNumber = i;
            cout << "일치하는 제목: " << "\n -> " << books[i].title << " by " << books[i].author << endl;
            break;
        }
        else {}
    }
    if (isFound = true) {
        cout << "1. 대여하기 2. 상위메뉴" << endl;
        int choiceBorrow;
        cin >> choiceBorrow;
        if (choiceBorrow == 1) {
            return books[bookNumber].title;
        }
    }
    else {// findBookByAuthor(title); 
    }
}

Book* findBookByAuthor(string author) {
    bool isFound = false;
    for (int i = 0; i < books.size(); i++) {
        if (books[i].author == author) {
            isFound = true;
        }
    }
    if (isFound = true) {
        cout << "1. 대여하기 2. 상위메뉴" << endl;
        int choiceBorrow;
        cin >> choiceBorrow;
        if (choiceBorrow == 1) {
            //getBookByAuthor(author);                
        }
    }
    else { cout << "일치하는 결과가 없습니다." << endl; }
}*/